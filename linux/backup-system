#!/bin/bash -eu

user=$(whoami)
rsync="rsync -rltzuv --info=flist0,stats0 --delete"

service_exists() {
    service --status-all 2> /dev/null | grep ' '"$1"'$' > /dev/null
}

restore=0

while [ $# -ne 0 ]; do
    case $1 in
    --restore)
        restore=1
        shift
    ;;
    --)
        shift
        break
    ;;
    -?*)
        echo "Invalid argument: $1" 1>&2
        exit 1
    ;;
    *)
        break
    ;;
    esac
done

if [ $# -eq 0 ] || [ -z "$1" ]; then
    echo "Please provide a destination directory." 1>&2
    exit 1
fi

dest_dir="$1"

if [ ! -d "$dest_dir" ]; then
    echo "$dest_dir does not exist!" 1>&2
    exit 1
fi

if [ "$dest_dir" == '/' ]; then
    echo "/ cannot be used as a destination directory!" 1>&2
    exit 1
fi

root_actions() {
    if (( $restore )); then
        local from_dir="$dest_dir"
        local to_dir="/"
    else
        local from_dir="/"
        local to_dir="$dest_dir"
    fi

    if (( $restore )); then
        # Install rsync if needed when restoring files.
        if ! command -v rsync; then
            apt-get update
            apt-get install -y rsync
        fi
    fi

    # rsync some parts of /
    echo 'Syncing /' 1>&2
    $root_rsync \
        --include='/' \
        --include='/etc/' \
        --include='/etc/ssh/' \
        --include='/etc/ssh/sshd_config' \
        --include='/etc/apt/' \
        --include='/etc/apt/sources.list.d/' \
        --include='/etc/apt/sources.list.d/*' \
        --include='/etc/samba/' \
        --include='/etc/samba/*' \
        --include='/etc/postgresql/' \
        --include='/etc/postgresql/**' \
        --include='/etc/network/' \
        --include='/etc/network/interfaces' \
        --include='/var/' \
        --include='/var/lib/' \
        --include='/var/lib/postgresql/' \
        --include='/var/lib/postgresql/**' \
        --include='/var/lib/couchdb/.*' \
        --include='/var/lib/couchdb/.*/**' \
        --include='/var/lib/rabbitmq/' \
        --include='/var/lib/rabbitmq/**' \
        --include='/var/lib/NetworkManager/' \
        --include='/var/lib/NetworkManager/**' \
        --exclude='*' \
        "$from_dir" "$to_dir/"

    # If Postgres is installed, rsync it again quickly while it's offline.
    if service_exists postgresql; then
        echo 'Syncing postgres while it is offline' 1>&2
        service postgresql stop
        $root_rsync \
            --include='/var/' \
            --include='/var/lib/' \
            --include='/var/lib/postgresql/' \
            --include='/var/lib/postgresql/**' \
            --exclude='*' \
        "$from_dir/" "$to_dir/"
        service postgresql start
    fi

    if service_exists couchdb; then
        echo 'Syncing couchdb while it is offline' 1>&2
        service couchdb stop
        $root_rsync \
            --include='/var/' \
            --include='/var/lib/' \
            --include='/var/lib/couchdb/' \
            --include='/var/lib/couchdb/**' \
            --exclude='*' \
        "$from_dir/" "$to_dir/"
        service couchdb start
    fi

    if (( $restore )); then
        if service_exists ssh; then
            # Restart SSH to apply new settings.
            service ssh restart
        fi

        echo 'Fixing some file stats...' 1>&2
        chown -fRv couchdb:couchdb /var/lib/couchdb
        chown -fRv postgres:postgres /var/lib/postgresql
        chmod -f 755 /etc/network
        chmod -f 644 /etc/network/interfaces
    fi
}

if (( $restore )); then
    root_rsync="$rsync"
else
    root_rsync="$rsync --chown=$user:$user"
fi

export restore
export root_rsync
export dest_dir
export user

# Run the root backup commands as root with one sudo invocation.
sudo --preserve-env bash -euc "$(declare -f service_exists); $(declare -f root_actions); root_actions"

if (( $restore )); then
    from_home_dir="$dest_dir/home/$user/"
    to_home_dir="$HOME"
    home_rsync="$rsync --chown=$user:$user"
else
    from_home_dir="$HOME"
    to_home_dir="$dest_dir/home/$user/"
    home_rsync="$rsync"

    mkdir -p "$to_home_dir"
fi

# rsync the /home/ directory.
echo 'Syncing /home/' 1>&2
$home_rsync \
    --exclude-from="$HOME/script/home_rsync_excludes" \
    "$from_home_dir/" "$to_home_dir/"

if (( $restore )); then
    echo 'Fixing some file modes...' 1>&2
    # Fix some user file modes.
    chmod 700 ~/.ssh
    chmod -f 644 ~/.ssh/authorized_keys
fi

echo 'Syncing apt packages' 1>&2

if (( $restore )); then
    # Install the list of apt packages.
    apt-get update
    apt-get install -y $(cat "$dest_dir/apt-packages" | tr "\n" ' ')
else
    # Output the full list of packages installed through apt.
    apt-mark showmanual > "$dest_dir/apt-packages"
fi

echo 'Syncing crontab' 1>&2

if (( $restore )); then
    # Restore crontab
    crontab "$dest_dir/home/$user/.crontab"
else
    # Output crontab to the destination directory.
    crontab -l > "$dest_dir/home/$user/.crontab"
fi
